<?xml version="1.0" encoding="utf-8"?>
<!--
这个XML文件定义了FrameLayoutActivity的用户界面布局。
它就像是一个画框，展示了如何使用FrameLayout来叠加和定位界面元素。

作用：
1. 展示FrameLayout的基本用法和特性
2. 提供不同场景下FrameLayout的使用示例

生命周期：
- 在FrameLayoutActivity创建时被加载（onCreate阶段）
- 当Activity重新创建（如屏幕旋转）时会重新加载

文件位置和引用：
- 位于app/src/main/res/layout/目录下
- 在FrameLayoutActivity中通过setContentView(R.layout.activity_frame_layout)引用
-->

<!-- ScrollView：滚动视图，允许内容在屏幕范围内滚动 -->
<!-- 
属性说明：
android:layout_width, android:layout_height
- 作用：定义视图的宽度和高度
- 可选值：match_parent（填充父容器）, wrap_content（适应内容大小）, 具体尺寸（如"100dp"）
- 推荐：match_parent，因为我们希望ScrollView填满整个屏幕
- 默认值：wrap_content
- 默认原因：允许视图根据内容自适应大小，但在这里我们需要它填满屏幕
-->
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- LinearLayout：线性布局，用于垂直排列内部的FrameLayout示例 -->
    <!-- 
    属性说明：
    android:orientation
    - 作用：设置LinearLayout的排列方向
    - 可选值：vertical（垂直）, horizontal（水平）
    - 推荐：vertical，因为我们希望垂直排列多个FrameLayout示例
    - 默认值：horizontal
    - 默认原因：水平排列更常用，但在这里我们需要垂直排列

    android:padding
    - 作用：设置内部元素与LinearLayout边缘的间距
    - 可选值：具体尺寸（如"16dp"）
    - 推荐：使用适当的padding增加视觉舒适度
    - 默认值：无
    - 默认原因：允许开发者根据需求自定义间距
    -->
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">

        <!-- TextView：显示标题文本 -->
        <!-- 
        属性说明：
        android:text
        - 作用：设置显示的文本内容
        - 可选值：直接文本或字符串资源引用（如"@string/frame_layout_title"）
        - 推荐：使用字符串资源引用，便于多语言支持
        - 默认值：无
        - 默认原因：允许开发者自定义文本内容

        android:textSize
        - 作用：设置文本大小
        - 可选值：具体尺寸（如"24sp"）
        - 推荐：使用sp单位，以适应用户的字体大小设置
        - 默认值：14sp
        - 默认原因：系统默认的文本大小

        android:layout_marginBottom
        - 作用：设置视图底部的外边距
        - 可选值：具体尺寸（如"16dp"）
        - 推荐：使用适当的边距增加视觉间隔
        - 默认值：0dp
        - 默认原因：默认无边距，允许开发者自定义
        -->
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="FrameLayout 示例"
            android:textSize="24sp"
            android:layout_marginBottom="16dp"/>

        <!-- 场景1：层叠布局 -->
        <!-- 
        FrameLayout：框架布局，用于叠加视图元素
        属性说明：
        android:layout_height
        - 作用：设置FrameLayout的高度
        - 可选值：wrap_content, match_parent, 具体尺寸（如"200dp"）
        - 推荐：使用固定高度，以便展示叠加效果
        - 默认值：wrap_content
        - 默认原因：默认适应内容大小，但这里我们需要固定高度

        android:background
        - 作用：设置背景颜色
        - 可选值：颜色值（如"#E0E0E0"）或颜色资源引用
        - 推荐：使用颜色资源引用，便于主题统一管理
        - 默认值：透明
        - 默认原因：允许开发者自定义背景

        android:layout_marginBottom
        - 作用：设置底部外边距
        - 可选值：具体尺寸（如"16dp"）
        - 推荐：使用适当的边距增加视觉间隔
        - 默认值：0dp
        - 默认原因：默认无边距，允许开发者自定义
        -->
        <FrameLayout
            android:layout_width="match_parent"
            android:layout_height="200dp"
            android:background="#E0E0E0"
            android:layout_marginBottom="16dp">

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="层叠布局"
                android:layout_gravity="center_horizontal"/>

            <!-- 
            属性说明：
            android:src
            - 作用：设置ImageView的图像源
            - 可选值：drawable资源引用（如"@drawable/ic_launcher_background"）
            - 推荐：使用矢量图或适当分辨率的图片资源
            - 默认值：无
            - 默认原因：允许开发者自定义图像

            android:scaleType
            - 作用：定义图像如何缩放以适应ImageView的尺寸
            - 可选值：centerCrop, fitXY, center等
            - 推荐：根据设计需求选择合适的缩放方式
            - 默认值：fitCenter
            - 默认原因：保持图像比例并完整显示
            -->
            <ImageView
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:src="@drawable/ic_launcher_background"
                android:scaleType="centerCrop"/>

            <!-- 
            属性说明：
            android:layout_gravity
            - 作用：定义子视图在FrameLayout中的位置
            - 可选值：center, top|start, bottom|end等组合
            - 推荐：根据设计需求选择合适的位置
            - 默认值：top|start
            - 默认原因：默认左上角对齐，允许开发者自定义位置

            android:textColor
            - 作用：设置文本颜色
            - 可选值：颜色值（如"@android:color/white"）或颜色资源引用
            - 推荐：使用颜色资源引用，便于主题统一管理
            - 默认值：系统默认文本颜色
            - 默认原因：允许开发者自定义文本颜色
            -->
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="叠加的文本"
                android:layout_gravity="center"
                android:textColor="@android:color/white"
                android:textSize="18sp"/>

            <Button
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="叠加的按钮"
                android:layout_gravity="bottom|end"
                android:layout_margin="16dp"/>
        </FrameLayout>

        <!-- 场景2：使用margin调整位置 -->
        <FrameLayout
            android:layout_width="match_parent"
            android:layout_height="150dp"
            android:background="#E0E0E0"
            android:layout_marginBottom="16dp">

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="使用margin调整位置"
                android:layout_gravity="center_horizontal"/>

            <!-- 
            属性说明：
            android:layout_margin
            - 作用：设置视图的外边距
            - 可选值：具体尺寸（如"16dp"）
            - 推荐：使用适当的边距调整视图位置
            - 默认值：0dp
            - 默认原因：默认无边距，允许开发者自定义
            -->
            <Button
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="左上角"
                android:layout_gravity="start|top"
                android:layout_margin="16dp"/>

            <Button
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="右下角"
                android:layout_gravity="end|bottom"
                android:layout_margin="16dp"/>
        </FrameLayout>

        <!-- 场景3：结合其他布局使用 -->
        <FrameLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#E0E0E0">

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="结合其他布局使用"
                android:layout_gravity="center_horizontal"/>

            <!-- 
            属性说明：
            android:layout_marginTop
            - 作用：设置视图的顶部外边距
            - 可选值：具体尺寸（如"24dp"）
            - 推荐：使用适当的边距调整视图位置
            - 默认值：0dp
            - 默认原因：默认无边距，允许开发者自定义
            -->
            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical"
                android:layout_marginTop="24dp">

                <Button
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:text="按钮 1"/>

                <Button
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:text="按钮 2"/>

                <Button
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:text="按钮 3"/>
            </LinearLayout>

            <!-- 
            属性说明：
            android:padding
            - 作用：设置视图的内边距
            - 可选值：具体尺寸（如"8dp"）
            - 推荐：使用适当的内边距增加视觉舒适度
            - 默认值：0dp
            - 默认原因：默认无内边距，允许开发者自定义
            -->
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="浮动文本"
                android:layout_gravity="end|bottom"
                android:background="@android:color/white"
                android:padding="8dp"
                android:layout_margin="16dp"/>
        </FrameLayout>

    </LinearLayout>
</ScrollView>