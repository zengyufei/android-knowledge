<?xml version="1.0" encoding="utf-8"?>
<!--
这个XML文件定义了TableLayoutActivity的用户界面布局。
它就像是一个餐厅的桌椅安排图，展示了如何使用TableLayout来组织界面元素。

作用：
1. 展示TableLayout的基本用法和特性
2. 提供不同场景下TableLayout的使用示例

生命周期：
- 在TableLayoutActivity创建时被加载（onCreate阶段）
- 当Activity重新创建（如屏幕旋转）时会重新加载

文件位置和引用：
- 位于app/src/main/res/layout/目录下
- 在TableLayoutActivity中通过setContentView(R.layout.activity_table_layout)引用
-->

<!-- ScrollView：滚动视图，允许内容在屏幕范围内滚动 -->
<!-- 
属性说明：
android:layout_width, android:layout_height
- 作用：定义视图的宽度和高度
- 可选值：match_parent（填充父容器）, wrap_content（适应内容大小）, 具体尺寸（如"100dp"）
- 推荐：match_parent，因为我们希望ScrollView填满整个屏幕
- 默认值：wrap_content
- 默认原因：允许视图根据内容自适应大小，但在这里我们需要它填满屏幕
-->
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- LinearLayout：线性布局，用于垂直排列内部的TableLayout示例 -->
    <!-- 
    属性说明：
    android:orientation
    - 作用：设置LinearLayout的排列方向
    - 可选值：vertical（垂直）, horizontal（水平）
    - 推荐：vertical，因为我们希望垂直排列多个TableLayout示例
    - 默认值：horizontal
    - 默认原因：水平排列更常用，但在这里我们需要垂直排列

    android:padding
    - 作用：设置内部元素与LinearLayout边缘的间距
    - 可选值：具体尺寸（如"16dp"）
    - 推荐：使用适当的padding增加视觉舒适度
    - 默认值：无
    - 默认原因：允许开发者根据需求自定义间距
    -->
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">

        <!-- TextView：显示标题文本 -->
        <!-- 
        属性说明：
        android:text
        - 作用：设置显示的文本内容
        - 可选值：直接文本或字符串资源引用（如"@string/table_layout_title"）
        - 推荐：使用字符串资源引用，便于多语言支持
        - 默认值：无
        - 默认原因：允许开发者自定义文本内容

        android:textSize
        - 作用：设置文本大小
        - 可选值：具体尺寸（如"24sp"）
        - 推荐：使用sp单位，以适应用户的字体大小设置
        - 默认值：14sp
        - 默认原因：系统默认的文本大小

        android:layout_marginBottom
        - 作用：设置视图底部的外边距
        - 可选值：具体尺寸（如"16dp"）
        - 推荐：使用适当的边距增加视觉间隔
        - 默认值：0dp
        - 默认原因：默认无边距，允许开发者自定义
        -->
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="TableLayout 示例"
            android:textSize="24sp"
            android:layout_marginBottom="16dp"/>

        <!-- 场景1：基本表格布局 -->
        <!-- 
        TableLayout：表格布局，用于创建行列结构
        属性说明：
        android:background
        - 作用：设置背景颜色
        - 可选值：颜色值（如"#E0E0E0"）或颜色资源引用
        - 推荐：使用颜色资源引用，便于主题统一管理
        - 默认值：透明
        - 默认原因：允许开发者自定义背景

        android:layout_marginBottom
        - 作用：设置底部外边距
        - 可选值：具体尺寸（如"16dp"）
        - 推荐：使用适当的边距增加视觉间隔
        - 默认值：0dp
        - 默认原因：默认无边距，允许开发者自定义
        -->
        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#E0E0E0"
            android:layout_marginBottom="16dp">

            <!-- TableRow：表格行，包含多个单元格 -->
            <TableRow>
                <!-- TextView：显示文本，这里用作表头 -->
                <!-- 
                属性说明：
                android:layout_span
                - 作用：设置单元格横跨的列数
                - 可选值：整数（如"3"）
                - 推荐：根据需要设置，这里横跨3列作为标题
                - 默认值：1
                - 默认原因：默认占据一列，允许开发者自定义跨列
                -->
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="基本表格布局"
                    android:layout_span="3"/>
            </TableRow>

            <TableRow>
                <TextView android:text="列 1" android:padding="3dip" />
                <TextView android:text="列 2" android:padding="3dip" />
                <TextView android:text="列 3" android:padding="3dip" />
            </TableRow>

            <TableRow>
                <TextView android:text="行 1, 列 1" android:padding="3dip" />
                <TextView android:text="行 1, 列 2" android:padding="3dip" />
                <TextView android:text="行 1, 列 3" android:padding="3dip" />
            </TableRow>

            <TableRow>
                <TextView android:text="行 2, 列 1" android:padding="3dip" />
                <TextView android:text="行 2, 列 2" android:padding="3dip" />
                <TextView android:text="行 2, 列 3" android:padding="3dip" />
            </TableRow>
        </TableLayout>

        <!-- 场景2：跨列和跨行 -->
        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#E0E0E0"
            android:layout_marginBottom="16dp">

            <TableRow>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="跨列和跨行"
                    android:layout_span="3"/>
            </TableRow>

            <TableRow>
                <TextView
                    android:text="跨两列"
                    android:layout_span="2"
                    android:padding="3dip"
                    android:background="#FFEB3B"/>
                <TextView
                    android:text="普通列"
                    android:padding="3dip"/>
            </TableRow>

            <TableRow>
                <TextView
                    android:text="跨两行"
                    android:layout_height="wrap_content"
                    android:layout_rowSpan="2"
                    android:gravity="center_vertical"
                    android:padding="3dip"
                    android:background="#4CAF50"/>
                <TextView
                    android:text="行 1, 列 2"
                    android:padding="3dip"/>
                <TextView
                    android:text="行 1, 列 3"
                    android:padding="3dip"/>
            </TableRow>

            <TableRow>
                <TextView
                    android:text="行 2, 列 2"
                    android:padding="3dip"/>
                <TextView
                    android:text="行 2, 列 3"
                    android:padding="3dip"/>
            </TableRow>
        </TableLayout>

        <!-- 场景3：拉伸和收缩列 -->
        <!-- 
        属性说明：
        android:stretchColumns
        - 作用：指定可以被拉伸的列
        - 可选值：列索引（如"1"）或列索引列表（如"1,2,3"）
        - 推荐：根据布局需求选择可拉伸的列
        - 默认值：无
        - 默认原因：默认所有列不可拉伸，允许开发者自定义

        android:shrinkColumns
        - 作用：指定可以被收缩的列
        - 可选值：列索引（如"2"）或列索引列表
        - 推荐：根据布局需求选择可收缩的列
        - 默认值：无
        - 默认原因：默认所有列不可收缩，允许开发者自定义
        -->
        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#E0E0E0"
            android:stretchColumns="1"
            android:shrinkColumns="2">

            <TableRow>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="拉伸和收缩列"
                    android:layout_span="3"/>
            </TableRow>

            <TableRow>
                <TextView
                    android:text="固定宽度"
                    android:padding="3dip"/>
                <TextView
                    android:text="可拉伸列"
                    android:padding="3dip"
                    android:background="#FF9800"/>
                <TextView
                    android:text="可收缩列 (长文本)"
                    android:padding="3dip"
                    android:background="#03A9F4"/>
            </TableRow>

            <TableRow>
                <TextView
                    android:text="行 2, 列 1"
                    android:padding="3dip"/>
                <TextView
                    android:text="行 2, 列 2 (拉伸)"
                    android:padding="3dip"
                    android:background="#FF9800"/>
                <TextView
                    android:text="行 2, 列 3 (收缩)"
                    android:padding="3dip"
                    android:background="#03A9F4"/>
            </TableRow>
        </TableLayout>

    </LinearLayout>
</ScrollView>