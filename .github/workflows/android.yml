name: Android CI

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
    tags:
      - 'release-*'

permissions:
  contents: write
  actions: read
  
jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout Repository
      uses: actions/checkout@v3
      
    # Step 2: Set up JDK 17
    - name: set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
        
    # Step 3: Cache Gradle dependencies
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
            
    # Step 4: Grant execute permission for Gradlew
    - name: Grant execute permission for gradlew
      run: cd S01_初学HelloWorld项目_全中文注释 && chmod +x gradlew

    # Step 5: Create a Keystore File
    - name: Create Keystore File
      run: |
        mkdir -p app
        echo "$NOTIFY_ME_KEYSTORE_BASE64" | tr -d '\n' | base64 -d > ${{ github.workspace }}/app/keystore.jks
      env:
        NOTIFY_ME_KEYSTORE_BASE64: ${{ secrets.NOTIFY_ME_KEYSTORE_BASE64 }}
        

    # Step 6: Build the APK
    - name: Build APK
      run: cd S01_初学HelloWorld项目_全中文注释 && ./gradlew assembleRelease -PkeystorePath=${{ github.workspace }}/app/keystore.jks
      env:
        JAVA_HOME: /opt/hostedtoolcache/Java_Zulu_jdk/17.0.12-7/x64
        NOTIFY_ME_KEYSTORE_PATH: ${{ github.workspace }}/app/keystore.jks
        NOTIFY_ME_KEY_ALIAS: ${{ secrets.NOTIFY_ME_KEY_ALIAS }}
        NOTIFY_ME_KEY_PASSWORD: ${{ secrets.NOTIFY_ME_KEY_PASSWORD }}
        NOTIFY_ME_KEYSTORE_PASSWORD: ${{ secrets.NOTIFY_ME_KEYSTORE_PASSWORD }}

    # Step 7: Find the generated APK and rename it with the tag name
    - name: Find and Rename APK
      run: |
        cd S01_初学HelloWorld项目_全中文注释
        APK_PATH=$(find app/build/outputs/apk/ -name "*.apk" | head -n 1)
        if [ -z "$APK_PATH" ]; then
          echo "APK not found"
          exit 1
        fi
        mv "$APK_PATH" "app/build/outputs/apk/release/S01_初学HelloWorld项目_全中文注释.apk"


    # Step 8: Upload APK to GitHub Actions Artifacts (Optional)
    - name: Upload APK Artifact
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: S01_初学HelloWorld项目_全中文注释.apk
        path: S01_初学HelloWorld项目_全中文注释/app/build/outputs/apk/release/S01_初学HelloWorld项目_全中文注释.apk
        if-no-files-found: warn

    # Step 9: Create GitHub Release and upload the APK
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Release notes for ${{ github.ref }}
        draft: false
        prerelease: false

    # Step 10: Upload APK to Release
    - name: Upload APK to Release
      if: success()
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: S01_初学HelloWorld项目_全中文注释/app/build/outputs/apk/release/S01_初学HelloWorld项目_全中文注释.apk
        asset_name: S01_初学HelloWorld项目_全中文注释.apk
        tag: ${{ github.ref }}
