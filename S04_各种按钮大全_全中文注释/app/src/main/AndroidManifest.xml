<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.MyApplication"
        tools:targetApi="31">
        <!--
        activity 标签：声明应用的一个页面，就像是店铺中的一个部门
        
        android:name 属性：
        - 作用：指定Activity的完整类名
        - 可选值：类的完整路径，如".MainActivity" 或 "com.example.app.MainActivity"
        - 含义：定义这个Activity对应的Java或Kotlin类
        - 用法：必须准确指定类的位置
        - 优点：明确定义Activity的实现类
        - 缺点：如果类名或包名变更，需要同步更新
        - 注意：使用"."开头表示相对于包名的路径
        - 替代方案：无实际可用的替代方案
        - 推荐：必须设置，是定义Activity的关键属性
        - 默认值：无
        - 原因：系统需要知道Activity类的确切位置

        android:exported 属性：
        - 作用：声明Activity是否可以被其他应用组件启动
        - 可选值：true（可以被外部启动），false（不能被外部启动）
        - 含义：控制Activity的可访问性
        - 用法：根据Activity的用途设置
        - 优点（true）：允许其他应用或系统组件启动此Activity
        - 缺点（true）：可能带来安全风险
        - 注意：Android 12及以上版本要求明确设置此属性
        - 替代方案：使用更细粒度的 intent-filter 来控制访问
        - 推荐：对于启动Activity设为true，其他通常设为false
        - 默认值：取决于是否有intent-filter，有则默认true，否则false
        - 原因：平衡开放性和安全性

        android:theme 属性：
        - 作用：为特定Activity设置主题
        - 可选值：指向style资源，如"@style/AppTheme.NoActionBar"
        - 含义：定义Activity的视觉风格
        - 用法：在activity标签中设置，覆盖应用级主题
        - 优点：可以为不同Activity设置不同风格
        - 缺点：可能导致应用风格不一致
        - 注意：会覆盖application中设置的默认主题
        - 替代方案：在代码中动态设置主题
        - 推荐：当Activity需要特殊风格时使用
        - 默认值：继承application中设置的主题
        - 原因：提供Activity级别的主题自定义

        android:launchMode 属性：
        - 作用：定义Activity的启动模式
        - 可选值：standard, singleTop, singleTask, singleInstance
        - 含义：控制Activity实例在任务栈中的创建和重用方式
        - 用法：在activity标签中设置
        - 优点：可以优化内存使用和用户体验
        - 缺点：使用不当可能导致应用行为异常
        - 注意：不同模式会影响Activity的生命周期和回调
        - 替代方案：在代码中使用Intent flags
        - 推荐：根据Activity的具体用途选择合适的模式
        - 默认值：standard
        - 原因：影响Activity的实例化和任务栈管理

        android:screenOrientation 属性：
        - 作用：设置Activity的屏幕方向
        - 可选值：portrait, landscape, sensor, 等
        - 含义：控制Activity的显示方向
        - 用法：在activity标签中设置
        - 优点：可以固定或灵活控制屏幕方向
        - 缺点：限制可能影响用户体验
        - 注意：某些设置可能与设备配置冲突
        - 替代方案：在代码中动态设置方向
        - 推荐：根据应用内容和用户体验需求选择
        - 默认值：unspecified（跟随系统设置）
        - 原因：适应不同的使用场景和设备类型
        -->
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:screenOrientation="portrait">

            <!--
            intent-filter 标签：
            - 作用：定义Activity、Service或BroadcastReceiver可以响应的Intent
            - 含义：指定组件可以处理的操作和数据类型
            - 用法：在组件声明中添加，可包含多个action、category和data子标签
            - 优点：允许组件响应系统或其他应用的隐式Intent
            - 缺点：可能增加安全风险，需谨慎使用
            - 注意：过于宽泛的intent-filter可能导致不必要的调用
            - 替代方案：使用显式Intent直接调用组件
            - 区别：显式Intent更安全但灵活性较低
            - 推荐：根据组件功能合理设置，避免过度暴露
            - 默认值：无，需明确定义
            - 原因：系统需要知道组件能够响应哪些Intent

            其他属性：
            1. android:priority
            - 作用：设置此intent-filter的优先级
            - 含义：数值越高，优先级越高
            - 用法：android:priority="100"
            - 优点：可以控制多个匹配的组件中哪个先被调用
            - 缺点：可能影响系统的正常调度
            - 注意：不应过度使用，可能导致应用间冲突
            - 替代方案：让用户选择使用哪个应用处理Intent
            - 改动影响：可能改变系统选择组件的顺序

            2. android:autoVerify
            - 作用：声明此intent-filter用于应用链接的自动验证
            - 含义：允许系统验证应用是否为特定网域的官方处理程序
            - 用法：android:autoVerify="true"
            - 优点：提高用户体验，无需手动选择应用打开链接
            - 缺点：需要额外的服务器端配置
            - 注意：仅适用于Android 6.0（API级别23）及以上版本
            - 替代方案：手动处理深层链接
            - 改动影响：影响应用如何处理来自网页的链接
            -->
            <intent-filter
                android:autoVerify="true"
                android:priority="100">

                <!--
                action 标签：
                - 作用：指定Intent可以执行的操作
                - 可选值：预定义的系统操作（如MAIN）或自定义操作
                - 含义：声明组件可以执行的具体动作
                - 用法：在intent-filter中添加，可以有多个
                - 优点：明确组件的功能
                - 缺点：如果使用自定义action，可能降低兼容性
                - 注意：至少需要一个action标签
                - 替代方案：无直接替代，是Intent过滤的核心
                - 推荐：使用标准系统action，除非有特殊需求
                - 默认值：无，必须明确指定
                - 原因：系统需要知道组件能执行什么操作
                -->
                <action android:name="android.intent.action.MAIN" />

                <!--
                category 标签：
                - 作用：为Intent提供附加信息
                - 可选值：预定义类别（如LAUNCHER）或自定义类别
                - 含义：进一步限定Intent的类型
                - 用法：在intent-filter中添加，可以有多个
                - 优点：提供更精确的Intent匹配
                - 缺点：过多类别可能限制组件的可访问性
                - 注意：LAUNCHER类别使Activity显示在应用启动器中
                - 替代方案：可以不使用，但会影响组件的可见性和可访问性
                - 推荐：根据组件的用途选择合适的类别
                - 默认值：无，但MAIN通常与LAUNCHER配对
                - 原因：提供额外的Intent分类信息
                -->
                <category android:name="android.intent.category.LAUNCHER" />

                <!--
                data 标签：
                - 作用：指定Intent可以处理的数据类型
                - 含义：定义组件可以处理的URI结构和MIME类型
                - 用法：在intent-filter中添加，可以有多个
                - 优点：精确控制组件可以响应的数据
                - 缺点：配置复杂，可能限制组件的通用性
                - 注意：需要正确设置scheme、host、path等属性
                - 替代方案：在代码中动态处理不同类型的数据
                - 改动影响：直接影响组件能否处理特定类型的数据或URI
                -->
                <!-- <data android:scheme="https" android:host="example.com" android:pathPrefix="/page" /> -->
            </intent-filter>
        </activity>
    </application>

</manifest>