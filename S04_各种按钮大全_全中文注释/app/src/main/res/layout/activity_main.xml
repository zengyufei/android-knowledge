<?xml version="1.0" encoding="utf-8"?><!--
activity_main.xml 就像是一个商店的室内设计图。

想象一下，这个XML文件就是一家新开张商店的布局设计：
1. 整体布局（ConstraintLayout）：就像是店铺的整个空间。
2. 文本显示（TextView）：就像是店内的一个广告牌或欢迎标语。

生命周期：
- 使用时机：当顾客（用户）进入商店（打开应用）时，这个设计图会被用来布置店面（显示界面）。
- 加载顺序：在MainActivity中被引用和加载，是用户看到的第一个界面。

文件位置：
- 存放位置：位于项目的 app/src/main/res/layout/activity_main.xml 文件中。
- 使用方式：在MainActivity的setContentView方法中被引用。

这个布局文件定义了应用主界面的外观，就像是决定了顾客进店后看到的第一印象。
-->

<!-- ConstraintLayout 属性说明：
android:id
- 作用：为视图指定唯一标识符
- 可选项：任何有效的资源ID（如"@+id/my_layout"）
- 推荐：使用描述性名称（如"@+id/main_container"）
- 原因：便于在代码和其他视图中引用
- 默认值：无，需要手动指定
- 默认原因：允许开发者根据需求自定义ID

android:layout_width, android:layout_height
- 作用：设置视图的宽度和高度
- 可选项：match_parent, wrap_content, 具体尺寸（如"300dp"）
- 推荐：match_parent（当前选项）
- 原因：作为根布局，通常需要填充整个屏幕
- 默认值：wrap_content
- 默认原因：安全默认值，防止意外占用过多空间

tools:context
- 作用：指定与此布局相关联的Activity
- 可选项：任何有效的Activity类名（如".MainActivity"）
- 推荐：指定关联的Activity（如当前的".MainActivity"）
- 原因：帮助设计时预览工具提供正确的上下文
- 默认值：无
- 默认原因：可选属性，不影响运行时行为
-->
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">
    <!-- NestedScrollView标签的作用：
    - 提供可滚动的容器，支持嵌套滚动
    - 适用于复杂布局和长内容的显示
    
    其他常用属性：
    1. android:fillViewport="true"：内容不足时也填满父容器
    2. android:scrollbars="vertical"：显示垂直滚动条
    3. android:fadeScrollbars="false"：始终显示滚动条
    4. android:scrollbarStyle="outsideOverlay"：滚动条样式
    5. app:layout_behavior="@string/appbar_scrolling_view_behavior"：与AppBarLayout协调
    
    属性作用和用法：
    - fillViewport：true时，即使内容不足也会填满父容器
    - scrollbars：控制滚动条显示方向，如"none"、"horizontal"
    - fadeScrollbars：false时滚动条始终可见
    - scrollbarStyle：定义滚动条位置和行为
    - layout_behavior：实现与其他组件的滚动协调
    
    优点：
    - 支持嵌套滚动，提高用户体验
    - 可处理复杂的滚动冲突
    - 与Material Design组件良好兼容
    
    缺点：
    - 相比普通ScrollView，性能略低
    - 使用不当可能导致过度嵌套，影响性能
    
    注意事项：
    - 避免在NestedScrollView中使用大型列表
    - 合理使用fillViewport属性
    - 注意处理滚动状态和位置
    
    替代方案：
    1. ScrollView：简单垂直滚动
    2. HorizontalScrollView：水平滚动
    3. RecyclerView：高效处理大量数据
    
    与当前方案区别：
    - ScrollView：不支持嵌套滚动，功能较简单
    - HorizontalScrollView：仅支持水平方向滚动
    - RecyclerView：更适合大量重复性内容，但配置复杂
    
    改动影响：
    - 可能影响滚动行为和性能
    - 需要调整子视图的布局参数
    - 可能需要更新相关的滚动监听器 -->
    <androidx.core.widget.NestedScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:fillViewport="true"
        android:scrollbars="vertical"
        android:fadeScrollbars="false"
        android:scrollbarStyle="outsideOverlay"
        app:layout_behavior="@string/appbar_scrolling_view_behavior">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">
            <!-- include标签的作用：
            - 将其他布局文件嵌入当前布局，实现布局复用
            - 减少代码重复，提高维护性
            
            其他属性：
            1. android:id：为include的布局指定ID
            2. android:layout_*：覆盖被包含布局的根视图布局参数
            3. android:visibility：控制包含的布局可见性
            
            属性作用和用法：
            - android:id="@+id/custom_id"：为包含的布局指定新ID
            - android:layout_width="match_parent"：覆盖被包含布局的宽度
            - android:visibility="gone"：初始隐藏被包含的布局
            
            优点：
            - 提高代码复用性
            - 简化布局结构
            - 便于维护和更新
            
            缺点：
            - 可能增加布局层级，影响性能
            - 不适合频繁动态修改的布局
            
            注意事项：
            - 被包含布局的根元素属性可能被覆盖
            - 避免循环包含，造成栈溢出
            
            替代方案：
            1. <merge>标签：减少视图层级
            2. 自定义View：更灵活，性能更好
            3. ViewStub：延迟加载，适合不常用的复杂布局
            
            与当前方案区别：
            - <merge>：减少一层视图嵌套，但使用场景受限
            - 自定义View：更适合复杂交互，但开发成本高
            - ViewStub：按需加载，节省内存，但不支持<merge>
            
            改动影响：
            - 布局结构变化可能影响其他引用此布局的地方
            - 性能可能略有提升或下降，取决于具体实现 -->
            <include layout="@layout/normal_btn" />

            <include layout="@layout/normal_btn2" />

            <include layout="@layout/normal_btn3" />

            <include layout="@layout/normal_btn4" />

            <include layout="@layout/normal_btn5" />
            
            <include layout="@layout/normal_btn6" />

            <include layout="@layout/normal_btn7" />




        </LinearLayout>
    </androidx.core.widget.NestedScrollView>

</androidx.constraintlayout.widget.ConstraintLayout>