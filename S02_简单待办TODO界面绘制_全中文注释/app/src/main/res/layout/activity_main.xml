<?xml version="1.0" encoding="utf-8"?>
<!--
activity_main.xml 就像是一个商店的室内设计图。

想象一下，这个XML文件就是一家新开张商店的布局设计：
1. 整体布局（ConstraintLayout）：就像是店铺的整个空间。
2. 文本显示（TextView）：就像是店内的一个广告牌或欢迎标语。

生命周期：
- 使用时机：当顾客（用户）进入商店（打开应用）时，这个设计图会被用来布置店面（显示界面）。
- 加载顺序：在MainActivity中被引用和加载，是用户看到的第一个界面。

文件位置：
- 存放位置：位于项目的 app/src/main/res/layout/activity_main.xml 文件中。
- 使用方式：在MainActivity的setContentView方法中被引用。

这个布局文件定义了应用主界面的外观，就像是决定了顾客进店后看到的第一印象。
-->

<!-- ConstraintLayout 属性说明：
android:id
- 作用：为视图指定唯一标识符
- 可选项：任何有效的资源ID（如"@+id/my_layout"）
- 推荐：使用描述性名称（如"@+id/main_container"）
- 原因：便于在代码和其他视图中引用
- 默认值：无，需要手动指定
- 默认原因：允许开发者根据需求自定义ID

android:layout_width, android:layout_height
- 作用：设置视图的宽度和高度
- 可选项：match_parent, wrap_content, 具体尺寸（如"300dp"）
- 推荐：match_parent（当前选项）
- 原因：作为根布局，通常需要填充整个屏幕
- 默认值：wrap_content
- 默认原因：安全默认值，防止意外占用过多空间

tools:context
- 作用：指定与此布局相关联的Activity
- 可选项：任何有效的Activity类名（如".MainActivity"）
- 推荐：指定关联的Activity（如当前的".MainActivity"）
- 原因：帮助设计时预览工具提供正确的上下文
- 默认值：无
- 默认原因：可选属性，不影响运行时行为
-->
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <!-- Button 属性说明：
    android:id
    - 作用：为视图指定唯一标识符
    - 可选项：任何有效的资源ID（如"@+id/my_button"）
    - 推荐：使用描述性名称（如"@+id/btnLinearLayout"）
    - 原因：便于在代码和其他视图中引用
    - 默认值：无，需要手动指定
    - 默认原因：允许开发者根据需求自定义ID

    android:layout_width, android:layout_height
    - 作用：设置视图的宽度和高度
    - 可选项：wrap_content, match_parent, 具体尺寸（如"200dp"）
    - 推荐：wrap_content（当前选项）
    - 原因：允许文本自适应内容大小，避免不必要的空间浪费
    - 默认值：wrap_content
    - 默认原因：最适合单个文本显示的需求，灵活且节省空间

    android:text
    - 作用：设置显示的文本内容
    - 可选项：直接文本（如"Hello World!"），字符串资源（如"@string/hello_world"）
    - 推荐：使用字符串资源（如"@string/hello_world"）
    - 原因：便于本地化和统一管理文本内容
    - 默认值：无
    - 默认原因：允许开发者根据需求设置文本内容

    app:layout_constraint[Start/End/Top/Bottom]_to[Start/End/Top/Bottom]Of
    - 作用：在ConstraintLayout中定位这个TextView
    - 可选项：parent, 其他视图的ID
    - 推荐：当前设置（居中显示）
    - 原因：在ConstraintLayout中实现居中效果
    - 默认值：无
    - 默认原因：ConstraintLayout要求明确设置约束

    其他常用属性：

    android:textSize
    - 作用：设置文本大小
    - 可选项：具体尺寸（如"16sp"）
    - 推荐：16sp（标准文本大小）
    - 默认值：14sp
    - 默认原因：Android系统的默认文本大小

    android:textColor
    - 作用：设置文本颜色
    - 可选项：颜色值（如"#000000"），颜色资源（如"@color/black"）
    - 推荐：使用颜色资源
    - 默认值：应用主题默认文本颜色
    - 默认原因：保持与应用整体风格一致

    android:fontFamily
    - 作用：设置字体
    - 可选项：系统字体（如"sans-serif"），自定义字体（如"@font/my_font"）
    - 推荐：使用系统字体（如"sans-serif"）
    - 默认值：系统默认字体
    - 默认原因：兼容性好，无需额外资源

    android:gravity
    - 作用：设置文本在TextView内部的对齐方式
    - 可选项：center, left, right, top, bottom等
    - 用法：android:gravity="center"
    - 优点：可以精确控制文本位置
    - 缺点：可能与layout_gravity混淆
    - 注意：与layout_gravity的区别
    - 替代方案：使用padding调整文本位置
    - 区别：gravity影响内容，padding影响整个视图
    - 改动影响：改变文本在TextView内的显示位置

    android:ellipsize
    - 作用：设置文本过长时的省略方式
    - 可选项：end, start, middle, marquee
    - 用法：android:ellipsize="end"
    - 优点：优雅处理长文本
    - 缺点：可能隐藏重要信息
    - 注意：使用marquee时需要额外设置
    - 替代方案：使用ScrollView包裹TextView
    - 区别：ScrollView允许滚动查看全文
    - 改动影响：改变长文本的显示方式

    android:maxLines
    - 作用：限制TextView显示的最大行数
    - 可选项：整数值
    - 用法：android:maxLines="2"
    - 优点：控制文本占用的垂直空间
    - 缺点：可能截断文本
    - 注意：与ellipsize配合使用效果更佳
    - 替代方案：使用固定高度的TextView
    - 区别：maxLines更灵活，固定高度可能导致文本被切割
    - 改动影响：限制文本的显示行数

    android:textStyle
    - 作用：设置文本样式
    - 可选项：normal, bold, italic
    - 用法：android:textStyle="bold|italic"
    - 优点：快速设置文本外观
    - 缺点：样式选项有限
    - 注意：可以组合使用
    - 替代方案：使用自定义字体
    - 区别：自定义字体提供更多样式选择
    - 改动影响：改变文本的视觉效果

    android:background
    - 作用：设置TextView的背景
    - 可选项：颜色值，drawable资源
    - 用法：android:background="@drawable/my_background"
    - 优点：可以创建复杂的背景效果
    - 缺点：可能影响性能
    - 注意：大型背景可能导致过度绘制
    - 替代方案：使用父布局的background
    - 区别：直接设置更精确��但可能增加布局复杂度
    - 改动影响：改变TextView的视觉外观
-->
    <Button
        android:id="@+id/btnLinearLayout"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="LinearLayout"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="50dp"/>

    <Button
        android:id="@+id/btnRelativeLayout"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="RelativeLayout"
        app:layout_constraintTop_toBottomOf="@id/btnLinearLayout"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="20dp"/>

    <Button
        android:id="@+id/btnFrameLayout"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="FrameLayout"
        app:layout_constraintTop_toBottomOf="@id/btnRelativeLayout"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="20dp"/>

    <Button
        android:id="@+id/btnTableLayout"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="TableLayout"
        app:layout_constraintTop_toBottomOf="@id/btnFrameLayout"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="20dp"/>

    <Button
        android:id="@+id/btnConstraintLayout"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="ConstraintLayout"
        app:layout_constraintTop_toBottomOf="@id/btnTableLayout"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="20dp"/>

</androidx.constraintlayout.widget.ConstraintLayout>